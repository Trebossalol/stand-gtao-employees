--[[
    Name        	Employees (Stand-GTAO)
    Author      	Trebossa
    Version     	1.0.0
	Description		Utility functions. Some of them are from WiriScript
]]

---@param entity Entity
---@param flag integer
function set_decor_flag(entity, flag)
	DECORATOR.DECOR_SET_INT(entity, "Casino_Game_Info_Decorator", flag)
end

---@param entity Entity
---@param flag integer
---@return boolean
function is_decor_flag_set(entity, flag)
	if ENTITY.DOES_ENTITY_EXIST(entity) and
	DECORATOR.DECOR_EXIST_ON(entity, "Casino_Game_Info_Decorator") then
		local value = DECORATOR.DECOR_GET_INT(entity, "Casino_Game_Info_Decorator")
		return (value & flag) ~= 0
	end
	return false
end

---@param entity Entity
function remove_decor(entity)
	DECORATOR.DECOR_REMOVE(entity, "Casino_Game_Info_Decorator")
end

---@param vehicle Entity
function deleteVehiclePassengers(vehicle)
	for seat = -1, VEHICLE.GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) -1 do
		if VEHICLE.IS_VEHICLE_SEAT_FREE(vehicle, seat, false) then
			continue
		end
		local passenger = VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, seat, false)
		if entities.request_control(passenger, 1000) then entities.delete_by_handle(passenger) end
	end
end

function get_waypoint_coords_as_vector3()
	local pid = players.user()
	local x, y, z, exists = players.get_waypoint(pid)
    if exists then
        return { x = x, y = y, z = z }
    else
        return nil
    end
end

function get_player_coords_as_vector3()
    local player_id = players.user()
    local player_ped = PLAYER.GET_PLAYER_PED(player_id)
    local player_coords = ENTITY.GET_ENTITY_COORDS(player_ped, true)
    return player_coords
end

---@param value SpawnPos
---@param targetPed Ped
function get_origin_spawn_pos(value, targetPed)
	local lowerCased = string.lower(value)
	if lowerCased == "target" then
		return ENTITY.GET_ENTITY_COORDS(targetPed, true)
	elseif lowerCased == "Self" then
		return get_player_coords_as_vector3()
	elseif lowerCased == "waypoint" then
		local coords = get_waypoint_coords_as_vector3()
		if coords == nil then 
			util.toast("No waypoint set")
			return nil
		end
		return coords
	else
		util.toast("Unknown spawnpoint: " .. heliSpawn)
		return nil
	end
end

---@param targetId integer
function set_as_hostile_target(targetId)
	local target = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(targetId)
	local playerRelGroup = PED.GET_PED_RELATIONSHIP_GROUP_HASH(target)
	PED.SET_RELATIONSHIP_BETWEEN_GROUPS(5, util.joaat("ARMY"), playerRelGroup)
	PED.SET_RELATIONSHIP_BETWEEN_GROUPS(5, playerRelGroup, util.joaat("ARMY"))
	PED.SET_RELATIONSHIP_BETWEEN_GROUPS(0, util.joaat("ARMY"), util.joaat("ARMY"))
end

---@param ped Ped
function set_as_hostile_employee(ped)
	PED.SET_PED_RELATIONSHIP_GROUP_HASH(ped, util.joaat("ARMY"))
	TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED(ped, 200.0, 0)
end

function delete_entities_with_decor_flag()
	local count = 0
	for _, vehicle in ipairs(entities.get_all_vehicles_as_handles()) do
		if is_decor_flag_set(vehicle, DecorFlag_isEnemyVehicle) and entities.request_control(vehicle, 1000) then
			deleteVehiclePassengers(vehicle)
			entities.delete_by_handle(vehicle)
			count += 1
		end
	end
	return count
end

---@param entity Entity
---@param sprite integer
---@param colour integer
---@param scale integer
function create_blip_for_entity(entity, sprite, colour, scale)
	local blip = HUD.ADD_BLIP_FOR_ENTITY(entity)
	HUD.SET_BLIP_SPRITE(blip, sprite)  -- Sprite für den Blip, 422 ist der Standard-Sprite für Helikopter
	HUD.SET_BLIP_COLOUR(blip, colour)    -- Farbe des Blips, 1 ist rot. Du kannst die Farbe ändern, wenn gewünscht.
	HUD.SET_BLIP_SCALE(blip, scale)   -- Größe des Blips auf der Karte
	return blip
end

---@param x integer
---@param y integer
function get_ground_z_at_coords(x, y)
    local ground_z = 0.0
    local result = MISC.GET_GROUND_Z_FOR_3D_COORD(x, y, 1000.0, ground_z)
    
    -- result ist true, wenn der Z-Wert erfolgreich abgerufen wurde
    if result then
        return ground_z
    else
        -- Wenn der Z-Wert nicht gefunden wurde, gib eine Standardhöhe zurück
        return nil
    end
end